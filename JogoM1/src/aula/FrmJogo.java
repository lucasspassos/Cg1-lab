/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aula;

import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.Random;

/**
 *
 * @author glauc
 */
public class FrmJogo
        extends javax.swing.JFrame
        implements Runnable {

    private boolean left;
    private boolean right;
    private boolean fimJogo;
    private boolean keyRestart;
    private boolean play;
    private long obstaculoTime;
    private Cenario cen;

    public FrmJogo() {
        initComponents();
        createBufferStrategy(2);
        Thread t = new Thread(this);
        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 523, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 686, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            left = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            right = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_R) {
            keyRestart = true;
        }else if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            play = true;
        }

    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            left = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            right = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_R) {
            keyRestart = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            play = false;
        }

    }//GEN-LAST:event_formKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmJogo().setVisible(true);
            }
        });
    }

    @Override
    public void run() {
        Font myFont = new Font ("Courier New", 1, 15);
        Graphics g;
        
        boolean stop = true;
        boolean start = false;
        double aumentaNivel=0;
        int dificuldade=2000;
        int ultimo=0,y=0,recorde=0, incr=2;
        ArrayList<Cenario> cenarios = new ArrayList();
        ArrayList<Cenario> lixoc = new ArrayList();
        ArrayList<Base> lista = new ArrayList();
        ArrayList<Base> lixo = new ArrayList();
        
        Carro player = new Carro("img/carro.png");
        player.setLargura(40);
        player.setAltura(60);
        player.setIncY(0);
        player.setIncX(150);
        player.setY(600);
        lista.add(player);

        while (true) {
            
            g = getBufferStrategy().getDrawGraphics();
            g.setFont (myFont);

            //cria primeiro cenario
           if(y == 0){
               Cenario c = new Cenario();
               cenarios.add(c);
           }
           //cria cenarios seguintes
           else if(ultimo == 300)
           {
               Cenario c = new Cenario();
               cenarios.add(c);
               ultimo = 0;
           }

           //move cenario
           for(Cenario cena : cenarios){
               cena.moveCen(incr);
           }
           //desenha cenario
           for(Cenario cena : cenarios){ 
               cena.criaFundo(g, getWidth(), getHeight()); 
           } 
 
           //retira o que saiu da cena
           for(Cenario cena : cenarios){
               if(cena.getPosy() > getHeight())
                   lixoc.add(cena);
           }
           cenarios.removeAll(lixoc);
            
            //Colisao Player com obstaculo
            for (Base b : lista) {
                if (player.colisao(b)) {
                    
                    g.setColor(Color.black);
                    g.fillRect(80,400,370,140);
                    g.setColor(Color.white);
                    g.drawString("Deu ruim, parceiro! As ruas de Sorocaba", 90, 435);
                    g.drawString("quebraram seu carro!!", 170, 450);
                    
                    if(recorde < y/10){
                        recorde = y/10;
                        g.drawString("Parabéns! Novo Recorde: " + Integer.toString(recorde) + " Metros", 110, 500);
                        g.drawString("Pressione (R) para recomeçar", 140, 520);
                    }
                    else{
                        g.drawString("Não foi dessa vez!!", 175, 490);
                        g.drawString("O record era de: " + Integer.toString(recorde) + " Metros", 145, 510);
                        g.drawString("Pressione (R) para recomeçar", 140, 520);
                        getBufferStrategy().show();
                    }
                    
                    y=0;
                    stop = false;  
                    aumentaNivel=0;
                    getBufferStrategy().show();

                    while(!stop){
                        
                        if(keyRestart){
                            b.setY(0);
                            dificuldade = 1000;                            
                            stop=true;
                            y=0;
                        }                           
                            try {
                            Thread.sleep(30);
                        } catch (InterruptedException ex) {
                        }
                    }
                
                }
            }
           
            for (Base b : lista) {
                b.mover();
            }

            
            for (Base b : lista) {
                b.desenhar(g);
            }
 
            long tempo = System.currentTimeMillis();

            if(tempo > obstaculoTime + dificuldade){
                obstaculoTime = tempo;
                Obstaculo t = new Obstaculo("img/hole.png");
                t.setIncX(0);
                t.setIncY(incr);
                t.setX(player.getX()-10);
                t.y =0;
                t.setAltura(30);
                t.setLargura(30);
                lista.add(t);
            }
            
            lista.removeAll(lixo);
            lixo.clear();

            if (left) {
                player.setIncX(-2);
            } else {
                if (right) {
                    player.setIncX(2);
                } else {
                    player.setIncX(0);
                }
            }
            
            //mostra pontuação na tela
           g.setColor(Color.white);
           
           g.drawString("Metros: " + Integer.toString(y/10), 345, 90);
           g.drawString("Recorde: " + Integer.toString(recorde) , 100, 90);
           //g.drawString("AumentaNivel: " + Double.toString(aumentaNivel) , 100, 200);
           
           if (aumentaNivel >= 100) {

             
               aumentaNivel = 0;
               if(dificuldade<=400)
               {
                   dificuldade -= 50;
               }
               else{
                    dificuldade -= 200;
               }
               g.setColor(Color.black);
               g.fillRect(70,400,390,60);
               g.setColor(Color.white);
               g.drawString("Prepare-se! Aqui a estrada é ainda pior.", 80, 435); 
               getBufferStrategy().show();
                try {
                    Thread.sleep(3000);
                } catch (InterruptedException ex) {
                    
                }
            }
             
           y++;
           aumentaNivel+= 0.1;
           ultimo++;
  
            g.dispose();
            getBufferStrategy().show();
            
            //Menu de inicio
            while(!start){
                
                        g.setColor(Color.green);
                        g.fillRect(80,300,370,320);
                        g.fillRect(70,400,390,60);
                        g.setColor(Color.white);
                        g.dispose();
                        getBufferStrategy().show();
                        
                        
                        if(play){
                            start = true;
                        }                           
                           
                    }
           
            try {
                Thread.sleep(4);
            } catch (InterruptedException ex) {
            }
        }

    }   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
